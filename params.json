{"name":"Fuzzlogia","tagline":"A simple Japanese-kanji-reading-aware fuzzy search in JavaScript","body":"# Fuzzlogia\r\n\r\n[![Build Status](https://travis-ci.org/builtinnya/fuzzlogia.svg?branch=master)](https://travis-ci.org/builtinnya/fuzzlogia)\r\n[![Coverage Status](https://coveralls.io/repos/builtinnya/fuzzlogia/badge.svg?branch=master)](https://coveralls.io/r/builtinnya/fuzzlogia?branch=master)\r\n[![Code Climate](https://codeclimate.com/github/builtinnya/fuzzlogia/badges/gpa.svg)](https://codeclimate.com/github/builtinnya/fuzzlogia)\r\n[![Dependency Status](https://david-dm.org/builtinnya/fuzzlogia.svg)](https://david-dm.org/builtinnya/fuzzlogia)\r\n[![devDependency Status](https://david-dm.org/builtinnya/fuzzlogia/dev-status.svg)](https://david-dm.org/builtinnya/fuzzlogia#info=devDependencies)\r\n\r\nFuzzlogia is a simple **Japanese-kanji-reading-aware fuzzy search** library written in JavaScript.\r\n\r\n> Fuzzlogia is still in the early development stage. The API is unstable.\r\n\r\nSome examples:\r\n\r\n```javascript\r\nvar fl = require('fuzzlogia');\r\n\r\n// => [ 'fuzzy' ]\r\nfl.search('fzzuy', [ 'fuzzy', 'matching' ]);\r\n\r\n// => [ '最高裁判所' ]\r\nfl.search('さいこうさいばんしょ', [ '最高裁判所' ]);\r\n\r\n// => [ '漢字は難しい' ]\r\nfl.search('かんじ', [ '漢字は難しい' ]);\r\n\r\n// => [ '銀河ヒッチハイクガイド' ]\r\nfl.search('ぎんが', [ '電気羊', '銀河ヒッチハイクガイド' ]);\r\n```\r\n\r\n## Features\r\n\r\n- **Pure** (no dependencies)\r\n\r\n- Fuzzy search with **ranking** (based on # of matched letters, distance, and item length)\r\n\r\n- **Japanese Kanji's on/kun/nanori reading aware** (using [KANJIDIC][])\r\n\r\n[KANJIDIC]: http://www.csse.monash.edu.au/~jwb/kanjidic.html\r\n\r\n## Installation\r\n\r\nUsing [npm](https://www.npmjs.com/):\r\n\r\n```shell\r\nnpm install --save fuzzlogia\r\n```\r\n\r\n### In browser\r\n\r\nYou can use [Browserify](http://browserify.org/) or [Webpack](http://webpack.github.io/) or whatever you want.\r\n\r\n## API\r\n\r\n### `search(query, bucket, extractor, options)`\r\n\r\n---\r\n\r\n**query** (*type*: `String`)\r\n\r\nA query string.\r\n\r\n---\r\n\r\n**bucket** (*type*: `Array`)\r\n\r\nAn array of items to search for.\r\n\r\n---\r\n\r\n**extractor** (*type*: `String|Function`, *default*: `identity`)\r\n\r\nA function to extract the string to be compared with `query` from each item.\r\nIf `extractor` is a string, it will be used as a property name.\r\n\r\nExamples:\r\n\r\n```javascript\r\n// => [ { name: 'John' }]\r\nfl.search('John', [ { name: 'John' } ], 'name');\r\n\r\n// => [ { firstName: 'John', lastName: 'Mullins'} ]\r\nfl.search('John', [ { firstName: 'John', lastName: 'Mullins'} ], function(item) {\r\n  return item.firstName + ' ' + item.lastName;\r\n});\r\n```\r\n\r\n---\r\n\r\n**options** (*type*: `Object`, *default*: see below)\r\n\r\nOptions to control the behavior. The following options are supported:\r\n\r\n- **threshold** (*type*: `Number`, *default*: 0)\r\n\r\n  If the number of characters in `query` **not** contained in an item string exceeds `threshold`,\r\n  the item will not appear in the result.\r\n\r\n  Examples:\r\n\r\n  ```javascript\r\n  // => []\r\n  fl.search('gist', [ 'git' ], null, { threshold: 0 })\r\n\r\n  // => [ 'git' ]\r\n  fl.search('gist', [ 'git' ], null, { threshold: 1 })\r\n  ```\r\n\r\n## Dictionaries\r\n\r\nFuzzlogia uses the following dictionaries:\r\n\r\n- **[KANJIDIC][]**\r\n\r\n  [KANJIDIC][] file contains comprehensive information about 6,355 Japanese kanji specified in the JIS X 0208-1990, including Japanese on/kun/nanori readings ([documentation][KANJIDIC DOC]).\r\n  The file is the property of the [Electronic Dictionary Research and Development Group][EDRDG], and are used in conformance with the Group's [licence][EDRDGL].\r\n\r\n[KANJIDIC]: http://www.csse.monash.edu.au/~jwb/kanjidic.html\r\n[KANJIDIC DOC]: http://www.edrdg.org/kanjidic/kanjidic_doc.html\r\n[EDRDG]: http://www.edrdg.org/\r\n[EDRDGL]: http://www.edrdg.org/edrdg/licence.html\r\n\r\n## Tools\r\n\r\nFuzzlogia contains the following tools:\r\n\r\n- **[kanjidic.js](tools/kanjidic.js)**\r\n\r\n  Extracts and compiles KANJIDIC into easy-to-use format for Fuzzlogia. See the file for usage.\r\n  [onkundic.js](src/onkundic.js) is automatically generated by this tool.\r\n\r\n## TODOs\r\n\r\n- Demo page\r\n\r\n- Performance analysis and tuning\r\n\r\n- Hiragana/katakana/romaji agnostic fuzzy search\r\n\r\n## Contributing to Fuzzlogia\r\n\r\nPull requests are welcomed.\r\nPlease add the relevant tests and ensure that it passes all the tests by executing\r\n`npm test` before submitting a pull request.\r\n\r\n## License\r\n\r\nCopyright © 2015 Naoto Yokoyama\r\n\r\nDistributed under the MIT license. See the [LICENSE](./LICENSE) file for full details.\r\n","google":"UA-60515707-1","note":"Don't delete this file! It's used internally to help with page regeneration."}